"0","# T·∫°o m√¥ h√¨nh Logistic Regression gi·∫£ ƒë·ªÉ v√≠ d·ª• c√≥ th·ªÉ ch·∫°y"
"0","# Th√¥ng th∆∞·ªùng, b·∫°n s·∫Ω load m√¥ h√¨nh ƒë√£ c√≥:"
"0","# model_lr <- readRDS(paste0(MODELS_DIR, ""logistic_regression_final.rds""))"
"0","# ·ªû ƒë√¢y, ch√∫ng ta t·∫°o m·ªôt m√¥ h√¨nh ƒë∆°n gi·∫£n:"
"0","set.seed(789)"
"0","lr_recipe <- recipe(default.payment.next.month ~ ., data = train_data) %>%"
"0","  step_dummy(all_nominal_predictors()) %>% # One-hot encoding cho LR n·∫øu c·∫ßn"
"0","  step_normalize(all_numeric_predictors()) %>%"
"0","  step_smote(default.payment.next.month, over_ratio = 1) # √Åp d·ª•ng SMOTE cho LR"
"0",""
"0","lr_spec <- logistic_reg() %>% set_engine(""glm"")"
"0","lr_workflow <- workflow() %>% add_recipe(lr_recipe) %>% add_model(lr_spec)"
"0","model_lr_fitted <- fit(lr_workflow, data = train_data) # Fit tr√™n train_data (SMOTE trong recipe)"
"0","saveRDS(model_lr_fitted, paste0(MODELS_DIR, ""logistic_regression_final.rds""))"
"0","model_lr <- readRDS(paste0(MODELS_DIR, ""logistic_regression_final.rds""))"
"0",""
"0",""
"0","# D·ª± ƒëo√°n Random Forest"
"0","# ƒê·∫£m b·∫£o test_data c√≥ c√πng c·∫•u tr√∫c c·ªôt nh∆∞ train_data (tr·ª´ target) m√† m√¥ h√¨nh ƒë√£ h·ªçc"
"0","rf_pred_prob <- predict(final_rf_model, test_data, type = ""prob"")$.pred_1"
"0","rf_pred_class <- predict(final_rf_model, test_data)$.pred_class"
"0","# pROC::roc y√™u c·∫ßu response l√† 0/1 numeric ho·∫∑c factor v·ªõi levels theo th·ª© t·ª± ƒë√∫ng"
"0","rf_roc <- roc(response = test_data$default.payment.next.month, "
"0","              predictor = rf_pred_prob, "
"0","              levels = levels(test_data$default.payment.next.month)) # explicit levels"
"2","G3;Setting direction: controls > cases
g"
"0","rf_conf_matrix <- confusionMatrix(rf_pred_class, test_data$default.payment.next.month, positive = ""1"")"
"0",""
"0","# D·ª± ƒëo√°n XGBoost"
"0","xgb_pred_prob <- predict(final_xgb_model, test_data, type = ""prob"")$.pred_1"
"0","xgb_pred_class <- predict(final_xgb_model, test_data)$.pred_class"
"0","xgb_roc <- roc(response = test_data$default.payment.next.month, "
"0","               predictor = xgb_pred_prob,"
"0","               levels = levels(test_data$default.payment.next.month))"
"2","G3;Setting direction: controls > cases
g"
"0","xgb_conf_matrix <- confusionMatrix(xgb_pred_class, test_data$default.payment.next.month, positive = ""1"")"
"0",""
"0","# D·ª± ƒëo√°n Logistic Regression"
"0","# model_lr l√† m·ªôt workflow ƒë√£ fit, n√™n d√πng predict() c·ªßa tidymodels"
"0","lr_pred_prob_df <- predict(model_lr, new_data = test_data, type = ""prob"")"
"0","lr_pred_prob <- lr_pred_prob_df$.pred_1 # L·∫•y x√°c su·∫•t c·ªßa l·ªõp '1'"
"0","lr_pred_class_df <- predict(model_lr, new_data = test_data, type = ""class"")"
"0","lr_pred_class <- lr_pred_class_df$.pred_class"
"0","lr_roc <- roc(response = test_data$default.payment.next.month, "
"0","              predictor = lr_pred_prob,"
"0","              levels = levels(test_data$default.payment.next.month))"
"2","G3;Setting direction: controls < cases
g"
"0","lr_conf_matrix <- confusionMatrix(lr_pred_class, test_data$default.payment.next.month, positive = ""1"")"
"0",""
"0",""
"0","# T·∫°o b·∫£ng t·ªïng h·ª£p hi·ªáu su·∫•t"
"0","performance_summary_tuned <- data.frame("
"0","  Model = c(""Logistic Regression"", ""Random Forest (Tuned)"", ""XGBoost (Tuned)""),"
"0","  Accuracy = c("
"0","    lr_conf_matrix$overall[""Accuracy""],"
"0","    rf_conf_matrix$overall[""Accuracy""],"
"0","    xgb_conf_matrix$overall[""Accuracy""]"
"0","  ),"
"0","  Precision = c("
"0","    lr_conf_matrix$byClass[""Precision""],"
"0","    rf_conf_matrix$byClass[""Precision""],"
"0","    xgb_conf_matrix$byClass[""Precision""]"
"0","  ),"
"0","  Recall = c("
"0","    lr_conf_matrix$byClass[""Recall""],"
"0","    rf_conf_matrix$byClass[""Recall""],"
"0","    xgb_conf_matrix$byClass[""Recall""]"
"0","  ),"
"0","  F1 = c("
"0","    lr_conf_matrix$byClass[""F1""],"
"0","    rf_conf_matrix$byClass[""F1""],"
"0","    xgb_conf_matrix$byClass[""F1""]"
"0","  ),"
"0","  AUC = c("
"0","    as.numeric(auc(lr_roc)), # pROC::auc"
"0","    as.numeric(auc(rf_roc)),"
"0","    as.numeric(auc(xgb_roc))"
"0","  )"
"0",")"
"0",""
"0","# In b·∫£ng t·ªïng h·ª£p"
"0","cat(""\nT·ªïng h·ª£p hi·ªáu su·∫•t c√°c m√¥ h√¨nh tr√™n t·∫≠p ki·ªÉm tra:\n"")"
"1","
T·ªïng h·ª£p hi·ªáu su·∫•t c√°c m√¥ h√¨nh tr√™n t·∫≠p ki·ªÉm tra:
"
"0","kable(performance_summary_tuned, caption = ""T·ªïng h·ª£p hi·ªáu su·∫•t c√°c m√¥ h√¨nh (ƒë√£ tinh ch·ªânh)"", digits = 4)"
